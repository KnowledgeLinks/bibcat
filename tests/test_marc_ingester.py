import datetime

import os
import rdflib
import sys
import unittest

sys.path.append(os.path.abspath(os.path.curdir))
import marc_ingester

class TestAddingAdminData(unittest.TestCase):

    def setUp(self):
        self.entity = rdflib.URIRef("http://test/resource")
        self.graph = marc_ingester.new_graph()
        
    def test_add_admin_metadata(self):
        marc_ingester.add_admin_metadata(self.graph, self.entity)
        subjects = [s for s in self.graph.subjects()]
        self.assertTrue(self.entity in subjects)
        self.assertEqual(len(subjects), 4)
        
    def test_type_of(self):
        sparql = """SELECT ?bnode
WHERE {{
    ?bnode a <{0}> .
}}"""
        marc_ingester.add_admin_metadata(self.graph, self.entity)
        results = [row for row in self.graph.query(
            sparql.format(marc_ingester.BF.GenerationProcess))]
        self.assertEqual(len(results), 1)
        self.assertTrue(isinstance(results[0][0], rdflib.BNode))

    def test_generate_date(self):
        sparql = """SELECT ?generationDate
WHERE {{
    ?bnode <{0}> ?generationDate .
}}""".format(marc_ingester.BF.generationDate)
        marc_ingester.add_admin_metadata(self.graph, self.entity)
        results = [r for r in self.graph.query(sparql)]
        date_literal = results[0][0]
        generate_date = datetime.datetime.strptime(
            date_literal, 
            "%Y-%m-%dT%H:%M:%S.%f")
        self.assertTrue(generate_date < datetime.datetime.utcnow())

    def test_rdf_value(self):
        sparql = """SELECT ?default
WHERE {
    ?bnode <http://www.w3.org/1999/02/22-rdf-syntax-ns#value> ?default .
}"""
        marc_ingester.add_admin_metadata(self.graph, self.entity)
        results = [r for r in self.graph.query(sparql)]
        message = results[0][0]
        self.assertEqual(str(message),
                         "Generated by RDF Framework from KnowledgeLinks.io")
        





if __name__ == '__main__':
    unittest.main()
    

