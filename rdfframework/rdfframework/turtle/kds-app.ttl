@prefix acl: <http://www.w3.org/ns/auth/acl#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix kds: <http://knowledgelinks.io/ns/data-structures/> .
@prefix kdr: <http://knowledgelinks.io/ns/data-resources/> .
@prefix obi: <https://w3id.org/openbadges#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <https://schema.org/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

obi:Assertion a rdf:Class;
	a kds:ControlledClass;
	rdfs:label "Open Badge Assertion";
	rdfs:comment "Assertion for open badges.";
	kds:storageType "object";
	kds:primaryKey [
		kds:keyCombo obi:recipient;
		kds:keyCombo obi:hasBadge
	]; 
	kds:jsonDefault [
		kds:jsonObjName "Assertion" 
	];
	kds:classSecurity [
		acl:agent kdr:Admin-SG;
		acl:mode acl:Read, acl:Write
	] ;
	kds:classSecurity [
		acl:agent kdr:User-SG;
		acl:mode acl:Read
	] .
	
obi:context a rdf:Property;
	rdfs:domain obi:Resource;
	rdfs:range rdfs:string;
	rdfs:comment "Name of the open badge instance.";
	kds:jsonDefault [	
		kds:appliesTo "default" ;
		kds:jsonObjName "@context";
		kds:jsonValFormat "objectValue" ;
		kds:defaultVal "https://w3id.org/openbadges/v1" ;
		kds:propertyField obi:context 
	];
	kds:json [
		kds:appliesTo obi:BadgeClass ;
		kds:appliesTo obi:Assertion 
	] ;
	kds:formDefault [
		kds:fieldType kdr:TextField;
		kds:formFieldName "Context"
	] .

obi:uid a rdf:Property;
	rdfs:domain obi:Assertion;
	rdfs:range kds:calculated;
	kds:storageType "none";
	rdfs:comment "Uuid of the open badge assertion.";	
	kds:jsonDefault [
		kds:jsonObjName "id";
		kds:jsonValFormat "subjectCalc" ;
		kds:parseType "afterLastSlash" ;
		kds:unionUrl "{{ base_url }}/badges/Assertion/"
	];
	kds:json [
		kds:appliesTo obi:Assertion 
	] ;
	kds:formDefault [
		kds:fieldType kdr:ServerField
	] .
	
obi:hasBadge a rdf:Property;
	rdfs:domain obi:Assertion;
	rdfs:range obi:BadgeClass;
	rdfs:comment "Badge used for the badge assertion.";
	kds:requiredByDomain obi:Assertion;
	kds:jsonDefault [
		kds:jsonObjName "badge";
		kds:jsonValFormat "lookupUrlSub" ;
		kds:propertyField obi:hasBadge ;
		kds:baseUrl "{{ base_url }}/badges/BadgeClass/";
		kds:urlendfld schema:alternativeName
	];
	kds:json [
		kds:appliesTo obi:Assertion 
	] ;
	kds:formDefault [
		kds:formFieldName "Badge";
		kds:formLabelName "Select a Badge";
		kds:formFieldHelp "Please select the badge that you want to award.";
		kds:fieldType [
			a	kdr:SelectField;
			kds:selectQuery "SELECT * {?s a obi:BadgeClass . ?s schema:name ?name .}";
			kds:selectBoundValue "?s";
			kds:selectDisplay "?name" 
		];
		kds:formInstance [
			kds:formInstanceType kdr:EditForm;
			kds:applicationAction kdr:NotEditable
		]
	] .
		

obi:issuedOn a rdf:Property;
	rdfs:domain obi:Assertion;
	rdfs:range xsd:date;
	rdfs:comment "Timestamp when badge was issued.";	
	kds:requiredByDomain obi:Assertion;
	kds:defaultVal "now";
	kds:jsonDefault [
		kds:jsonObjName "issuedOn";
		kds:jsonValFormat "objectValue" ;
		kds:propertyField obi:issuedOn 
	] ;
	kds:json [
		kds:appliesTo obi:Assertion 
	] ;
	kds:formDefault [
		kds:formFieldName "issuedOn";
		kds:formLabelName "Issued On";
		kds:formFieldHelp "Enter the date that the badge was awarded.";
		kds:fieldType kdr:DateField;
		kds:addonCss "dp";
		kds:formInstance [
			kds:formInstanceType kdr:EditForm;
			kds:applicationAction kdr:NotEditable
		]
	] .
	
obi:expires a rdf:Property;
	rdfs:domain obi:Assertion;
	rdfs:range rdfs:datetime;
	rdfs:comment "Timestamp when badge expires.";	
	kds:defaultVal "now + 360";
	kds:jsonDefault [
		kds:jsonObjName "expires";
		kds:jsonValFormat "objectValue" ;
		kds:propertyField obi:expires 
	] ;
	kds:json [
		kds:appliesTo obi:Assertion 
	] ;
	kds:formDefault [
		kds:formFieldName "expiresOn";
		kds:formLabelName "Expires On";
		kds:formFieldHelp "Enter the date that the awarded Badge will expire.";
		kds:fieldType kdr:DateTimeField;
		kds:addonCss "dp";
	] .
	
obi:startDate a rdf:Property;
	rdfs:domain obi:BadgeClass;
	rdfs:range xsd:date;
	rdfs:comment "Date the badge is available.";	
	kds:defaultVal "today";
	kds:requiredByDomain obi:BadgeClass;
	kds:jsonDefault [
		kds:jsonObjName "expires";
		kds:jsonValFormat "objectValue" ;
		kds:propertyField obi:expires 
	] ;
	kds:formDefault [
		kds:formFieldName "startDate";
		kds:formLabelName "Start Date";
		kds:formFieldHelp "Enter the date that the badge is available.";
		kds:fieldType kdr:DateField;
		kds:addonCss "dp";
	] .
	
obi:endDate a rdf:Property;
	rdfs:domain obi:BadgeClass;
	rdfs:range xsd:date;
	rdfs:comment "Date the badge is no longer available.";	
	kds:formDefault [
		kds:formFieldName "endDate";
		kds:formLabelName "End Date";
		kds:formFieldHelp "Enter the date that the badge is no longer available.";
		kds:fieldType kdr:DateField;
		kds:addOnCss "dp";
	] .

obi:recipient a rdf:Property;
	rdfs:domain obi:Assertion;
	rdfs:range schema:Person;
	kds:requiredByDomain obi:Assertion;
	rdfs:comment "Recipient of a Badge.";	
	kds:jsonDefault [
		kds:jsonObjName "recipient";
		kds:jsonValFormat "lookupProperties" ;
		kds:lookupReturnField [
			kds:jsonObjName "type";
			kds:jsonValFormat "objectValue" ;
			kds:defaultVal "email";
			kds:propertyField obi:assertionType
		] ;
		kds:lookupReturnField [
			kds:jsonObjName "hashed";
			kds:jsonValFormat "objectValue" ;
			kds:defaultVal true ;
			kds:propertyField obi:hash
		] ;
		kds:lookupReturnField [
			kds:jsonObjName "salt";
			kds:jsonValFormat "objectValue" ;
			kds:defaultVal "secretKey";
			kds:propertyField kds:salt;
		] ;
		kds:lookupReturnField [
			kds:jsonObjName "identity";
			kds:jsonValFormat "objectValue" ;
			kds:propertyField obi:identity
		]
	] ;
	kds:json [
		kds:appliesTo obi:Assertion 
	] ;
	kds:formDefault [
		kds:formFieldName "Recipient";
		kds:formLabelName "Select the Recipient";
		kds:formFieldHelp "Please select or enter a new recipient.";
		kds:fieldType [
			a	kdr:SelectField;
			kds:selectQuery "SELECT * {
																?s a schema:Person . 
																?s schema:familyName ?familyName .
																?s schema:givenName ?givenName .
																BIND (CONCAT(?familyName,', ',?givenName) AS ?name) 
																} 
																ORDER BY ?name";
			kds:selectBoundValue "?s";
			kds:selectDisplay "?name" 
		];
		kds:formInstance [
			kds:formInstanceType kdr:EditForm;
			kds:applicationAction kdr:NotEditable
		]
	] .
	
obi:verify a rdf:Property;
	rdfs:domain obi:Recipient;
	rdfs:range rdfs:string;
	rdfs:comment "Instructions for third parties to verify this assertion.";	
	kds:jsonDefault [
		kds:appliesTo obi:Assertion;
		kds:jsonObjName "verify";
		kds:jsonValFormat "lookupProperties" ;
		kds:lookupReturnField [
			kds:jsonObjName "type";
			kds:jsonValFormat "objectValue" ;
			kds:defaultVal "hosted"
		] ;
		kds:lookupReturnField [
			kds:jsonObjName "url";
			kds:jsonValFormat "subjectCalc" ;
			kds:parseType "afterLastSlash" ;
			kds:unionUrl "{{ base_url }}/badges/Assertion/"
		]
	] ;
	kds:json [
		kds:appliesTo obi:Assertion 
	] .
	
	
schema:name a rdf:Property;	
	rdfs:domain	obi:BadgeClass;
	rdfs:domain schema:Organization;
	rdfs:domain kds:UserGroup;	
	rdfs:range	xsd:string;	
	rdfs:comment "Name of the open badge instance.";	
	kds:requiredByDomain obi:BadgeClass;
	kds:requiredByDomain schema:Organization;
	kds:requiredByDomain kds:UserGroup;
	kds:jsonDefault [
		kds:jsonObjName "name";
		kds:jsonValFormat "objectValue"
	] ;
	kds:json [
		kds:appliesTo obi:BadgeClass 
	] ;
	kds:formDefault [
		kds:formFieldName "badgeName";
		kds:formLabelName "Badge Name";
		kds:formFieldHelp "Enter the name of the Badge you want to create.";
		kds:fieldType [
			a	kdr:TextField 
		];
		kds:formInstance [
			kds:formInstanceType kdr:EditForm;
			kds:applicationAction kdr:NotEditable
		]
	] .

schema:description a rdf:Property;	
	rdfs:domain	obi:BadgeClass;
	rdfs:domain	schema:Organization;		
	rdfs:range	xsd:string;	
	rdfs:comment "Description of the open badge instance.";	
	kds:requiredByDomain obi:BadgeClass;
	kds:jsonDefault [
		kds:jsonObjName "description";
		kds:jsonValFormat "objectValue"
	] ;
	kds:json [
		kds:appliesTo obi:BadgeClass 
	] ;
	kds:formDefault [
		kds:formFieldName "itemDescription";
		kds:formLabelName "Description";
		kds:formFieldHelp "Please enter a description.";
		kds:fieldType [
			a	kdr:TextAreaField
		]
	] .
	

obi:issuer a rdf:Property;	
	rdfs:domain	obi:BadgeClass;	
	rdfs:range	schema:Organization;	
	rdfs:label "Issuer";
	rdfs:comment "Issuer of the open badge instance.";	
	kds:requiredByDomain obi:BadgeClass;
	kds:defaultVal	"defaultOrgURI";
	kds:jsonDefault [
		kds:jsonObjName "issuer";
		kds:jsonValFormat "lookup";
		kds:lookupReturnField schema:URL;
	] ;
	kds:json [
		kds:appliesTo obi:BadgeClass 
	] ;
	kds:formDefault [
		kds:formFieldName "issuingOrg";
		kds:formLabelName "Issuing Organization";
		kds:formFieldHelp "Select the badge issuing organization";
		kds:fieldType [
			a	kdr:SelectField;
			kds:selectQuery "SELECT * {
																?s a schema:Organization . 
																?s schema:name ?name . 
																} 
																ORDER BY ?name";
			kds:selectBoundValue "?s";
			kds:selectDisplay "?name";
			kds:linkedForm obi:OrganizationForm 
		];
		kds:formInstance [
			kds:formInstanceType kdr:EditForm;
			kds:applicationAction kdr:NotEditable
		]
	] .
	
schema:affliation	a rdf:Property;
	rdfs:domain schema:Person;
	rdfs:range schema:Organization;
	rdfs:label "Affiliated with";
	kds:formDefault [
		kds:formFieldName "affiliation";
		kds:formLabelName "Organization";
		kds:formFieldHelp "Enter an affiliated organization.";
		kds:fieldType [
			a kdr:SelectField;
			kds:selectQuery "SELECT * {
																?s a schema:Organization . 
																?s schema:name ?name . 
																} 
																ORDER BY ?name";
			kds:selectBoundValue "?s";
			kds:selectDisplay "?name" 
		]
	] .

obi:type a rdf:Property;	
	rdfs:domain	obi:BadgeClass;
	rdfs:domain obi:Assertion;
	rdfs:range	rdf:Class;	
	rdfs:comment "Type of item";
	kds:requiredByDomain obi:BadgeClass;
	kds:requiredByDomain obi:Assertion;
	kds:defaultVal "item_class";
	kds:jsonDefault [
		kds:jsonObjName "type";
		kds:jsonValFormat "lookup";
		kds:lookupReturnField kds:jsonObjName
	];
	kds:json [
		kds:appliesTo obi:Assertion 
	] ;
	kds:json [
		kds:appliesTo obi:BadgeClass 
	] ;
	kds:formDefault [
		kds:fieldType [
			a kdr:ServerField
		]
	] .

schema:image a rdf:Property;	
	rdfs:domain	obi:BadgeClass;	
	rdfs:domain obi:Assertion;
	rdfs:domain schema:Organization;
	rdfs:range	schema:ImageObject;
	rdfs:range	schema:URL;
	kds:requiredByDomain obi:BadgeClass;
	kds:requiredByDomain obi:Assertion;
	kds:propertyProcessing [
		kds:appliesTo obi:BadgeClass;
		a kdr:ImageProcessor;
		kds:imageOptions [
			kds:imageHeight "220px";
			kds:imageWidth "220px";
			kds:imageSizeLimit "256kb";
			kds:imageFormat "png"
		]
	];
	kds:propertyProcessing [
		kds:appliesTo obi:Assertion;
		a kdr:AssertionImageBakingProcessor
	];
	rdfs:comment "Image of the item.";	
	kds:json [ 
		kds:appliesTo obi:BadgeClass ;
		kds:jsonObjName "image";
		kds:jsonValFormat "urlSub";
		kds:baseUrl "{{ base_url }}/badges/BadgeImage/"
	];
	kds:json [
		kds:appliesTo obi:Assertion ;
		kds:urlendfld schema:alternativeName;
		kds:jsonValFormat "subjectCalc" ;
		kds:parseType "afterLastSlash" ;
		kds:unionUrl "{{ base_url }}/badges/AssertionImage/"
	] ;
	kds:formDefault [
		kds:formFieldName "imageOptions";
		kds:formLabelName "Image";
		kds:formFieldHelp "Select an Image for the item.";
		kds:fieldType [
			a	kdr:ImageFileOrURLField; 
		];
		kds:formInstance [
			kds:formInstanceType kdr:EditForm;
			kds:applicationAction kdr:NotEditable
		]
	] .


obi:criteria a rdf:Property;	
	rdfs:domain	obi:BadgeClass;	
	rdfs:range	xsd:string;	
	rdfs:comment "Criteria for earning the Badge.";	
	kds:jsonDefault [
		kds:jsonObjName "criteria";
		kds:jsonValFormat "urlSub";
		kds:baseUrl "{{ base_url }}/badges/BadgeCriteria/";
		kds:urlendfld schema:alternativeName
	] ;
	kds:json [
		kds:appliesTo obi:BadgeClass 
	] ;
	kds:formDefault [
		kds:formFieldName "criteria";
		kds:formLabelName "Criteria";
		kds:formFieldHelp "Enter the criteria for earing the Badge.";
		kds:fieldType [
			a	kdr:TextField; 
		]
	].

schema:alternativeName a rdf:Property;
	rdfs:domain	obi:BadgeClass;
	rdfs:domain	schema:Organization;
	rdfs:range	xsd:string;
	kds:requiredByDomain obi:BadgeClass;
	kds:requiredByDomain schema:Organization;
	kds:propertyProcessing [
		a kdr:CalculationProcessor;
		kds:calculation "slugify(schema:name)" 
	] .
	
	
obi:id a rdf:Property;		
	rdfs:comment "Issuer of the open badge instance.";	
	kds:jsonDefault [
		kds:jsonObjName "id";
		kds:jsonValFormat "urlSub";
		kds:baseUrl "{{ base_url }}/badges/BadgeClass/";
		kds:urlendfld schema:alternativeName
	] ;
	kds:json [
		kds:appliesTo obi:BadgeClass ;
	] .
	
obi:tags a rdf:Property;	
	rdfs:domain	obi:BadgeClass;	
	rdfs:range	xsd:string;	
	rdfs:comment "Tags for the badges.";
	kds:propertyProcessing [
		a kdr:CSVstringToMultiPropertyProcessor
	];
	kds:jsonDefault [
		kds:jsonObjName "tags";
		kds:jsonValFormat "multiValArray"
	] ;
	kds:json [
		kds:appliesTo obi:BadgeClass 	
	] ;
	kds:formDefault [
		kds:formFieldName "itemtags";
		kds:formLabelName "Tags";
		kds:formFieldHelp "Add tags seperated by commas.";
		kds:fieldType [
			a	kdr:TextField; 
		];
		kds:formInstance [
			kds:formInstanceType kdr:EditForm;
			kds:applicationAction kdr:NotEditable
		]
	] .
	
rdf:Class kds:storageType "object" ;
	a kds:ControlledClass .

schema:Organization a rdf:Class;
	a kds:ControlledClass ;
	kds:storageType "object";
	kds:primaryKey schema:name;
	kds:jsonDefault [
		kds:jsonObjName "org";
		kds:jsonValFormat "lookup";
		kds:lookupReturnField schema:name
	] .
	
schema:url a rdf:Property;
	rdfs:domain	schema:Organization;	
	rdfs:range	schema:URL;	
	rdfs:comment "url for the item";	
	kds:requiredByDomain schema:Organization;
	kds:jsonDefault [
		kds:jsonObjName "url";
		kds:jsonValFormat "objectValue"
	];
	kds:formDefault [
		kds:formFieldName "website";
		kds:formLabelName "Web Address";
		kds:formFieldHelp "Enter the web address in 'http...' format.";
		kds:fieldType [
			a	kdr:UrlField; 
		];
	] .
	
schema:ImageObject a rdf:Class;
	a kds:ControlledClass ;
	kds:storageType "object".
	
schema:URL a rdf:Class;
	a kds:ControlledClass ;
	kds:storageType "literal".
	
	
	
obi:BadgeClass a rdf:Class;
	a kds:ControlledClass ;
	kds:storageType "object";
	kds:primaryKey schema:name;
	rdfs:comment "Class for open badges.";	
	rdfs:label "Open Badge Class";
	kds:jsonDefault [
		kds:jsonObjName "badgeClass";
		kds:jsonValFormat "lookup";
		kds:lookupReturnField schema:name
	] .
	
kds:UserClass a kds:ControlledClass ;
	kds:storageType "object" ;
	kds:primaryKey kds:hasPerson.
	
kds:UserGroup kds:primaryKey schema:name ;
	kds:saveLocation "triplestore" ;
	kds:subjectCalc "slugify(schema:name)" .
	
kds:PasswordClass a kds:ControlledClass;
	kds:storageType "object" .


schema:Person a kds:ControlledClass ;
	kds:storageType "object";
	kds:primaryKey schema:email.
	
schema:givenName a rdf:Property;	
	rdfs:domain	schema:Person;	
	rdfs:range	xsd:string;	
	rdfs:comment "First name or given name for an individual.";	
	kds:requiredByDomain schema:Person;
	kds:jsonDefault [
		kds:jsonObjName "givenname";
		kds:jsonValFormat "objectValue"
	] ;
	kds:formDefault [
		kds:formFieldName "givenname";
		kds:formLabelName "First name";
		kds:formFieldHelp "Enter the person's first/given name.";
		kds:fieldType [
			a	kdr:TextField; 
		];
	] .
	
schema:familyName a rdf:Property;	
	rdfs:domain	schema:Person;	
	rdfs:range	xsd:string;	
	rdfs:comment "Last name or family name for an individual.";	
	kds:requiredByDomain schema:Person;
	kds:jsonDefault [
		kds:jsonObjName "familyname";
		kds:jsonValFormat "objectValue"
	] ;
	kds:formDefault [
		kds:formFieldName "familyname";
		kds:formLabelName "Last name";
		kds:formFieldHelp "Enter the person's last/family name.";
		kds:fieldType [
			a	kdr:TextField; 
		];
	] .
	
schema:email a rdf:Property;	
	rdfs:domain	schema:Person;	
	rdfs:domain schema:Organization;
	rdfs:range	xsd:string;	
	rdfs:comment "email address.";
	kds:requiredByDomain schema:Person;
	kds:propertyProcessing [
		a kdr:EmailVerificationProcessor
	];                   
	kds:propertyValidation [
		a kdr:EmailValidator
	];
	kds:propertySecurity [
		acl:agent kdr:Self-SG;
		acl:mode acl:Read, acl:Write
	] ;
	kds:jsonDefault [
		kds:jsonObjName "email";
		kds:jsonValFormat "objectValue"
	] ;
	kds:formDefault [
		kds:formFieldName "emailaddr";
		kds:formLabelName "Email Address";
		kds:formFieldHelp "Enter a valid email address.";
		kds:fieldType [
			a	kdr:TextField
		]
	] .

kds:userName a rdf:Property;	
	rdfs:domain	kds:UserClass;	
	rdfs:range xsd:string;	
	rdfs:comment "Individual's username.";	           
	kds:requiredByDomain kds:UserClass;
	kds:propertyValidation [
		a	kdr:UniqueValueValidator;
	];
	kds:propertyValidation [
		a kdr:StringLengthValidator;
		kds:parameters "max=25,min=10"
	];
	kds:jsonDefault [
		kds:jsonObjName "username";
		kds:jsonValFormat "objectValue"
	] ;
	kds:formDefault [
		kds:formFieldName "username";
		kds:formLabelName "Username";
		kds:formFieldHelp "Enter username for ";
		kds:fieldType [
			a	kdr:TextField
		]
	] .

kds:salt a rdf:Property;	
	#rdfs:domain	kds:PasswordClass; listed in Vocab def
	rdfs:domain obi:Assertion;	
	# rdfs:range	xsd:string;	stated in vocab
	kds:requiredByDomain kds:PasswordClass;
	kds:requiredByDomain obi:Assertion;
	kds:propertyProcessing [
		a kdr:SaltProcessor
	] ;
	kds:propertySecurity [
		kds:appliesTo kds:PasswordClass;
		acl:agent kdr:Self-SG;
		acl:mode acl:Read, acl:Write
	] ;
	kds:jsonDefault [
		kds:jsonObjName "salt";
		kds:jsonValFormat "objectValue"
	] ;
	kds:json [
		kds:appliesTo obi:Assertion
	];
	kds:json [
		kds:appliesTo obi:UserClass
	];
	kds:formDefault [
		kds:fieldType kdr:ServerField;
		kds:fieldProcessing "salt";
		kds:formFieldName "salt"
	].
	
	
kds:password 	
	#rdfs:domain	kds:PasswordClass;	Stated in Vocab
	#rdfs:range	xsd:string;	stated in Vocab
	kds:requiredByDomain kds:PasswordClass;	
	kds:propertyValidation [
		a kdr:PasswordValidator 
	];
	kds:propertyProcessing  [
		a kdr:PasswordProcessor
	];
	kds:jsonDefault [
		kds:jsonObjName "password";
		kds:jsonValFormat "objectValue"
	];
	kds:json [
		kds:appliesTo obi:UserClass;
	];
	kds:formDefault [
		kds:fieldType kdr:PasswordField;
		kds:formLabelName "Password";        
		kds:formFieldName "password"
	] .	

kds:hasPerson a rdf:Property;
	rdfs:range schema:Person;
	kds:requiredByDomain kds:UserClass;
	kds:jsonDefault [
		kds:jsonObjName "username";
		kds:jsonValFormat "lookup";
		kds:lookupReturnField [
			kds:jsonValFormat "objectValue" ;
			kds:propertyField schema:name
		]
	];
	kds:json [
		kds:appliesTo obi:UserClass;
	];
	kds:formDefault [
		kds:formLabelName "Password";        
		kds:formFieldName "password";
		kds:formFieldHelp "Enter Password: Minimum 16 characters with 2 uppercase, 2 lowercase and 2 special characters.";
		kds:fieldType [
			a	kds:SelectField;
			kds:selectQuery "SELECT ?s ?name 
											{
												?s a schema:Person .
												?s a schema:givenName ?givenName .
												?s a schema:familyName ?familyName .
												BIND (CONCAT(?familyName,', ',?givenName) AS ?name .
												OPTIONAL {
													?u a kds:UserClass .
													?u kds:hasPerson ?s .
												}
												FILTER (!(bound(?s))
											}
											ORDER BY ?name";
			kds:selectBoundValue "?s";
			kds:selectDisplay "?name"
		]	
	] .
	
kds:hasPassword a rdf:Property;	
	rdfs:domain	kds:UserClass;	
	rdfs:range	kds:PasswordClass;	
	rdfs:comment "User's account password object.";
	kds:requiredByDomain kds:UserClass;
	kds:storageType "object";                           
	kds:jsonDefault [
		kds:jsonObjName "Password";
		kds:jsonValFormat "lookupProperties";
		kds:lookupReturnField [
			kds:jsonObjName "salt";
			kds:jsonValFormat "objectValue" ;
			kds:propertyField obi:salt
		] ;
		kds:lookupReturnField [
			kds:jsonObjName "type";
			kds:jsonValFormat "objectValue" ;
			kds:propertyField kds:password
		]
	] ;
	kds:json [
				kds:appliesTo obi:UserClass
	].
 
obi:LoginForm a kds:FormClass;
	rdfs:label "Login form";
	rdfs:comment "Form used to display username and password fields for authenticating to app";
	kds:formInstructions [  
		kds:form_Method "POST";
		kds:form_enctype "multipart/form-data";
		kds:formTitle "Login";
		kds:formDescription "Enter login credentials";
		kds:lookupClassUri kds:UserClass;
		kds:lookupPropertyUri kds:userName;
		kds:saveAction kdr:AuthenticateUser;
		kds:formUrl "login";
		kds:formInstance [
			kds:formInstanceType kdr:Login;
			kds:submitSuccessRedirect "!--source";
			kds:submitFailRedirect "!--currentpage";
			kds:instanceUrl "none";
		]
	];    
	kds:hasProperty [
		kds:propUri kds:userName;
		kds:overrideValidation [
			a kdr:DoNotValidate
		];
		kds:formFieldOrder 1;
		kds:formLayoutRow 1; 
	];
	kds:hasProperty [
		kds:propUri kds:password;
		kds:formFieldOrder 2;
		kds:formLayoutRow 2;
		kds:fieldType [
			a kdr:PasswordField;
			kds:fieldMode kdr:LoginPassword
		] 
	].

obi:OrganizationForm a kds:FormClass;
	rdfs:label "Organization Form";
	rdfs:comment "Form used for CRUD operations for an organization.";
	kds:formInstructions [
		kds:form_Method "POST";
		kds:form_enctype "multipart/form-data";
		kds:formTitle "Organization";
		kds:lookupClassUri schema:Organization;
		kds:formDescription "Organization infomation";
		kds:formUrl "organization";
		kds:formInstance [
			kds:formInstanceType kdr:NewForm;
			kds:formTitle "New Organization";
			kds:formDescription "Create a new organization";
			kds:submitSuccessRedirect kdr:DisplayForm;
			kds:submitFailRedirect "!--currentpage";
			kds:instanceUrl "new";
		];
		kds:formInstance [
			kds:formInstanceType kdr:EditForm;
			kds:formDescription "Edit organization information.";
			kds:submitSuccessRedirect kdr:DisplayForm;
			kds:submitFailRedirect "!--currentpage";
			kds:instanceUrl "edit";
		];
		kds:formInstance [
			kds:formInstanceType kdr:DisplayForm;
			kds:instanceUrl "view";
		]
	];
	kds:hasProperty [
		kds:propUri schema:name;
		kds:classUri schema:Organization;
		kds:formFieldOrder 1;
		kds:formLayoutRow 1;
		kds:formFieldName "orgname";
		kds:formLabelName "Organization Name";
		kds:formFieldHelp "Enter the official name of the organization";
	] ;
	kds:hasProperty [
		kds:propUri schema:url;
		kds:classUri schema:Organization;
		kds:formFieldOrder 2;
		kds:formLayoutRow 2
	] ;
	kds:hasProperty [
		kds:propUri schema:description;
		kds:classUri schema:Organization;
		kds:formLabelName "Description";
		kds:formFieldOrder 3;
		kds:formLayoutRow 3
	] ;
	kds:hasProperty [
		kds:propUri schema:email;
		kds:classUri schema:Organization;
		kds:formLabelName "Organizational Email";
		kds:formFieldOrder 4;
		kds:formLayoutRow 4
	] ;
	kds:hasProperty [
		kds:propUri schema:image;
		kds:classUri schema:Organization;
		kds:formFieldOrder 5;
		kds:formLayoutRow 5;
	].


obi:UserForm a kds:FormClass;
	rdfs:label "User form";
	rdfs:comment "Use this form for creating, editing and displaying user information. It will store results in a UserClass and Person RDF classes";
	kds:formInstructions [
		kds:form_Method "POST";
		kds:form_enctype "multipart/form-data";
		kds:formTitle "User Information";
		kds:formDescription "User infomation";
		kds:lookupClassUri schema:Person;
		kds:submitSuccessRedirect kdr:DisplayForm;
		kds:submitFailRedirect "!--currentpage";
		kds:formInstance [
			kds:formInstanceType kdr:NewForm;
			kds:formTitle "New User";
			kds:formDescription "Create a new user account"
		];
		kds:formInstance [
			kds:formInstanceType kdr:EditForm;
			kds:formDescription "Edit user information."
		];
		kds:formInstance [
			kds:formInstanceType kdr:DisplayForm
		]
	];
	kds:hasProperty [
		kds:propUri schema:email;
		kds:classUri schema:Person;
		kds:formFieldOrder 1;
		kds:formLayoutRow 1;
		kds:formInstance [
			kds:formInstanceType kdr:NewForm;
			kds:applicationAction kdr:LookupAddNewWorkFlow; 
		]
	];
	kds:hasProperty [
		kds:propUri schema:familyName;
		kds:formFieldOrder 3;
		kds:formLayoutRow 2;
	];
	kds:hasProperty [
		kds:propUri schema:givenName;
		kds:formFieldOrder 2;
		kds:formLayoutRow 2;
	];
	kds:hasProperty [
		kds:propUri kds:userName;
		kds:formFieldOrder 4;
		kds:formLayoutRow 3
	];
	kds:hasProperty [
		kds:propUri kds:password;
		kds:formFieldOrder 5;
		kds:formLayoutRow 4;
		kds:formInstance [
			kds:formInstanceType kdr:NewForm;
			kds:fieldType [
				a kdr:PasswordField;
				kds:fieldMode kdr:InitialPassword
			] 
		];
		kds:formInstance [
			kds:formInstanceType kdr:EditForm;
			kds:fieldType [
				a kdr:PasswordField;
				kds:fieldMode kdr:ChangePassword
			] 
		]
	].
	
obi:AssertionPerson a kds:FormClass;
	rdfs:label "Sub-form to be used with the assertion form";
	rdfs:comment "Sub-form to be used with the assertion form";
	kds:formInstructions [
		kds:formTitle "Awardees";
		kds:formDescription "Award badges";
		kds:lookupClassUri obi:Assertion;
		kds:formInstance [
			kds:formInstanceType kdr:NewForm
		];
		kds:formInstance [
			kds:formInstanceType kdr:EditForm
		];
		kds:formInstance [
			kds:formInstanceType kdr:DisplayForm
		]
	];
	kds:hasProperty [
		kds:propUri schema:email;
		kds:classUri schema:Person;
		kds:formFieldOrder 1;
		kds:formLayoutRow 1;
		kds:formInstance [
			kds:formInstanceType kdr:NewForm;
			kds:applicationAction kdr:LookupAddNewWorkFlow; 
		]
	];
	kds:hasProperty [
		kds:propUri schema:familyName;
		kds:formFieldOrder 3;
		kds:formLayoutRow 1;
	];
	kds:hasProperty [
		kds:propUri schema:givenName;
		kds:formFieldOrder 2;
		kds:formLayoutRow 1;
	];
	kds:hasProperty [
		kds:propUri obi:issuedOn;
		kds:formFieldOrder 4;
		kds:formLayoutRow 1;
		kds:formInstance [
			kds:formInstanceType kdr:NewForm;
			kds:applicationAction kdr:RemoveFromForm
		];
	];
	kds:hasProperty [
		kds:propUri obi:recipient;
		kds:formFieldOrder 5;
		kds:formLayoutRow 1;
		kds:requiredField false ;
		kds:formLabelName "Hidden Recipient Uri";
		kds:fieldType [
			a kdr:TextField
		]
	].
	
kdr:Badge a kds:FormClass;
	rdfs:label "Badge form";
	rdfs:comment "Use this form for generating a new Badge.";
	kds:formInstructions [
		kds:form_Method "POST";
		kds:form_enctype "multipart/form-data";
		kds:formTitle "Open Badge";
		kds:formDescription "Badge infomation";
		kds:lookupClassUri obi:BadgeClass;
		kds:submitSuccessRedirect kdr:DisplayForm;
		kds:submitFailRedirect "!--currentpage";
		kds:formInstance [
			kds:formInstanceType kdr:NewForm;
			kds:formTitle "New Open Badge";
			kds:formDescription "Create a new open badge"
		];
		kds:formInstance [
			kds:formInstanceType kdr:EditForm;
			kds:formDescription "Edit badge information."
		];
		kds:formInstance [
			kds:formInstanceType kdr:DisplayForm;
			kds:formDescription "Badge information."
		]
	];
	kds:hasProperty [
		kds:propUri obi:issuer;
		kds:formFieldOrder 0.5;
		kds:formLayoutRow 1;
		kds:formInstance [
			kds:formInstanceType kdr:NewForm;
			kds:applicationAction kdr:LookupAddNewWorkFlow; 
		];
		kds:formInstance [
			kds:formInstanceType kdr:EditForm;
			kds:applicationAction kdr:NotEditable 
		];
		kds:formInstance [
			kds:formInstanceType kdr:DisplayForm
		]
	];
	kds:hasProperty [
		kds:propUri schema:name;
		kds:classUri obi:BadgeClass;
		kds:formFieldOrder 1;
		kds:formLayoutRow 1;
		kds:formInstance [
			kds:formInstanceType kdr:NewForm;
			kds:applicationAction kdr:LookupAddNewWorkFlow; 
		];
		kds:formInstance [
			kds:formInstanceType kdr:EditForm;
			#kds:applicationAction kdr:NotEditable 
		]
	];
	kds:hasProperty [
		kds:propUri schema:description;
		kds:classUri obi:BadgeClass;
		kds:formFieldOrder 2;
		kds:formLayoutRow 2;
	];
	kds:hasProperty [
		kds:propUri obi:startDate;
		kds:formFieldOrder 3;
		kds:formLayoutRow 3;
		kds:addOnCss "dp";
	];
	kds:hasProperty [
		kds:propUri obi:endDate;
		kds:formFieldOrder 4;
		kds:formLayoutRow 3;
	];
	kds:hasProperty [
		kds:propUri schema:image;
		kds:classUri obi:BadgeClass;
		kds:formFieldOrder 5;
		kds:formLayoutRow 4;
	];
	kds:hasProperty [
		kds:propUri obi:tags;
		kds:formFieldOrder 6;
		kds:formLayoutRow 5;
	];
	kds:hasProperty [
		kds:propUri obi:criteria;
		kds:formFieldOrder 7;
		kds:formLayoutRow 6;
	].
	
obi:AssertionForm a kds:FormClass;
	rdfs:label "Assertion form";
	rdfs:comment "Use this form for generating a badge assertion.";
	kds:formInstructions [
		kds:form_Method "POST";
		kds:form_enctype "multipart/form-data";
		kds:formTitle "Badge Assertion";
		kds:formDescription "Awarded Badge information";
		kds:lookupClassUri obi:BadgeClass;
		kds:lookupPropUri obi:hasBadge;
		kds:submitSuccessRedirect kdr:DisplayForm;
		kds:submitFailRedirect "!--currentpage";
		kds:formInstance [
			kds:formInstanceType kdr:NewForm;
			kds:formTitle "New Badge Assertion";
			kds:formDescription "Award a badge."
		];
		kds:formInstance [
			kds:formInstanceType kdr:EditForm;
			kds:formDescription "Edit assertion information."
		];
		kds:formInstance [
			kds:formInstanceType kdr:DisplayForm
		]
	];
	kds:formSecurity [
		acl:accessTo kdr:NewForm, kdr:EditForm;
		acl:agent kdr:Admin;
		acl:mode acl:Read, acl:Append
	];
	kds:formSecurity [
		acl:accessTo kdr:DisplayForm;
		acl:agent kdr:User-SG;
		acl:mode acl:read
	];
	kds:hasProperty [
		kds:propUri schema:image;
		kds:classUri obi:BadgeClass;
		kds:formFieldOrder .5;
		kds:formLayoutRow 1;
		kds:formInstance [
			kds:formInstanceType kdr:EditForm;
			kds:applicationAction kdr:RemoveFromForm
		];
		kds:formInstance [
			kds:formInstanceType kdr:DisplayForm;
			kds:formLabelName " ";
		];
		kds:formInstance [
			kds:formInstanceType kdr:NewForm;
			kds:applicationAction kdr:RemoveFromForm
		];
	];
	kds:hasProperty [
		kds:propUri obi:hasBadge;
		kds:classUri obi:Assertion;
		kds:formFieldOrder 1;
		kds:formLayoutRow 1;
		kds:formValidation [
			a kds:TestValidator;
			kds:parameters "asdfdas"
		];
		kds:formInstance [
			kds:formInstanceType kdr:EditForm;
			kds:formLabelName "Badge Name"
		];
		kds:formInstance [
			kds:formInstanceType kdr:DisplayForm;
			kds:formLabelName "Badge Name";
		];
	];
	kds:hasProperty [
		kds:propUri obi:issuedOn;
		kds:formFieldOrder 2;
		kds:formLayoutRow 2;
		kds:requiredField true ;
		kds:formInstance [
			kds:formInstanceType kdr:EditForm;
			kds:applicationAction kdr:RemoveFromForm
		];
		kds:formInstance [
			kds:formInstanceType kdr:DisplayForm;
			kds:applicationAction kdr:RemoveFromForm
		];
	];
	kds:hasProperty [
		kds:propUri obi:recipient;
		kds:formFieldOrder 3;
		kds:formLayoutRow 3;
		kds:formLabelName "Add recipients:";
		kds:fieldType [
			a kdr:SubForm;
			kds:subFormUri obi:AssertionPerson;
			kds:subFormInstance kdr:LinkWithParent;
			kds:subFormMode kdr:RepeatingSubForm
		]
	];
	kds:hasProperty [
		kds:propUri kds:salt;
		kds:classUri obi:Assertion;
		kds:formFieldOrder 4;
		kds:formLayoutRow 4;
	].
	

	
obi:application a kds:Application;
	kds:applicationSecurity [
		acl:mode kds:SuperUser;
		acl:agent kdr:SysAdmin-SG
	];
	kds:applicationSecurity [
		acl:mode acl:Read, acl:Write, acl:Control;
		acl:agent kdr:Admin-SG
	];
	kds:applicationSecurity [
		acl:mode acl:Read, acl:Append;
		acl:agent kdr:User-SG
	];
	kds:formDefault [
		kds:fieldCss "form-control";
		kds:rowCss "appFormRowCss";
		kds:formCss "appFormFormCss"
	];
	kds:dataFormats [
		kds:pythonDateFormat "%m/%d/%Y";
		kds:javascriptDateFormat "mm/dd/yyyy"
	];
	kds:appNameSpace [
		kds:prefix "rdf";
		kds:nameSpaceUri "http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	];
	kds:appNameSpace [
		kds:prefix "acl";
		kds:nameSpaceUri "http://www.w3.org/ns/auth/acl#"
	]; 
	kds:appNameSpace [
		kds:prefix "xsd";
		kds:nameSpaceUri "http://www.w3.org/2001/XMLSchema#"
	]; 
	kds:appNameSpace [
		kds:prefix "schema";
		kds:nameSpaceUri "https://schema.org/"
	]; 
	kds:appNameSpace [
		kds:prefix "kds";
		kds:nameSpaceUri "http://knowledgelinks.io/ns/data-structures/"
	]; 
	kds:appNameSpace [
		kds:prefix "kdr";
		kds:nameSpaceUri "http://knowledgelinks.io/ns/data-resources/"
	]; 
	kds:appNameSpace [
		kds:prefix "foaf";
		kds:nameSpaceUri "http://xmlns.com/foaf/0.1/"
	]; 
	kds:appNameSpace [
		kds:prefix "rdfs";
		kds:nameSpaceUri "http://www.w3.org/2000/01/rdf-schema#"
	]; 
	kds:appNameSpace [
		kds:prefix "obi";
		kds:nameSpaceUri "https://w3id.org/openbadges#"
	] .

kdr:UserGroupForm a kds:FormClass;
	rdfs:label "Usergroup form";
	rdfs:comment "Use this form for managing usergroup members.";
	kds:formInstructions [
		kds:form_Method "POST";
		kds:form_enctype "multipart/form-data";
		kds:formTitle "User group managment";
		kds:formDescription "Add and remove users from the group";
		kds:lookupClassUri kds:UserGroup;
		kds:lookupPropUri "class_subject";
		kds:submitSuccessRedirect kdr:DisplayForm;
		kds:submitFailRedirect "!--currentpage";
		kds:formInstance [
			kds:formInstanceType kdr:NewForm;
			kds:formTitle "New Badge Assertion";
			kds:formDescription "Award a badge."
		];
		kds:formInstance [
			kds:formInstanceType kdr:EditForm;
			kds:formDescription "Edit assertion information."
		];
		kds:formInstance [
			kds:formInstanceType kdr:DisplayForm
		]
	];
	kds:formSecurity [
		acl:accessTo kdr:NewForm, kdr:EditForm;
		acl:agent kdr:Admin;
		acl:mode acl:Read, acl:Append
	];
	kds:formSecurity [
		acl:accessTo kdr:DisplayForm;
		acl:agent kdr:User-SG;
		acl:mode acl:read
	];
	kds:hasProperty [
		kds:propUri schema:name;
		kds:classUri kds:UserGroup;
		kds:formFieldOrder 1;
		kds:formLayoutRow 1;
		kds:formFieldName "usergroupname";
		kds:formLabelName "User group";
		kds:formInstance [
			kds:formInstanceType kdr:EditForm;
			kds:formLabelName "Badge Name";
			kds:applicationAction kdr:NotEditable
		];
	];
	kds:hasProperty [
		kds:propUri kds:hasUser;
		kds:formFieldOrder 2;
		kds:formLayoutRow 2;
		kds:requiredField true ;
	].
	
kds:hasUser a rdf:Property;
	rdfs:domain kds:UserGroup;
	rdfs:range schema:Person;
	kds:formDefault [
		kds:formLabelName "User";        
		kds:formFieldName "user";
		kds:formFieldHelp "Select the user";
		kds:fieldType [
			a	kdr:FieldList;
			kds:listFieldType kdr:SelectField;
			kds:selectQuery "SELECT ?s ?name 
							{
								?user a kds:UserClass .
								?user kds:hasPerson ?s .
								?s schema:givenName ?givenName .
								?s schema:familyName ?familyName . 
								?s schema:email ?email .
								BIND (CONCAT(?familyName,'-',?givenName,'-',?email) AS ?name) .
							}
							ORDER BY ?name";
			kds:selectBoundValue "?user";
			kds:selectDisplay "?name"
		]	
	] .
	
obi:BadgeApi a kds:ApiClass;
	rdfs:label "Badge Definition";
	rdfs:comment "This api returns an open badge assertion.";
	kds:apiInstructions [
		kds:apiMethod "GET";
		kds:lookupClassUri obi:BadgeClass;
		kds:lookupPropertyUri schema:alternativeName;
		kds:apiUrl "badge";
		kds:apiUrlExtension "json";
		kds:returnType "json"
	];
	kds:hasProperty [
		kds:propUri kds:StaticValue;
		kds:returnValue "https://w3id.org/openbadges/v1";	
		kds:classUri kds:NoClass;
		kds:apiFieldName "@context";
	];
	kds:hasProperty [
		kds:propUri obi:type;
		kds:classUri obi:BadgeClass;
		kds:apiFieldName "type";
	];
	kds:hasProperty [
		kds:propUri schema:name;
		kds:classUri obi:BadgeClass;
		kds:apiFieldName "name";
	];
	kds:hasProperty [
		kds:propUri schema:description;
		kds:classUri obi:BadgeClass;
		kds:apiFieldName "description";
	];
	kds:hasProperty [
		kds:propUri schema:alternativeName;
		kds:classUri obi:BadgeClass;
		kds:apiFieldName "id";
		kds:calculationType kdr:Concat;
		kds:calculationSeparator ",";
		kds:calculation "!--api_url"
	];
	kds:hasProperty [
		kds:propUri schema:alternativeName;
		kds:classUri obi:BadgeClass;
		kds:propertyProcessing [
			a kdr:CalculationProcessor;
			kds:calculationType kdr:Concat;
			kds:calculationSeparator ",";
			kds:calculation "!--base_api_url,badge/,<<schema:alternativeName>>,.png"
		] ;
		kds:apiFieldName "image";
		
	];
	kds:hasProperty [
		kds:propUri schema:alternativeName;
		kds:classUri obi:BadgeClass;
		kds:propertyProcessing [
			a kdr:CalculationProcessor;
			kds:calculationType kdr:Concat;
			kds:calculationSeparator ",";
			kds:calculation "!--base_url,badge/DisplayForm.html?name=,<<schema:alternativeName>>"
		] ;
		kds:apiFieldName "criteria";
	];
	kds:hasProperty [
		kds:propUri obi:tags;
		kds:classUri obi:BadgeClass;
		kds:propertyProcessing [
			a kdr:MultiPropertyToArray
		];
		kds:apiFieldName "tags";
	];
	kds:hasProperty [
		kds:propUri schema:alternativeName;
		kds:classUri schema:Organization;
		kds:propertyProcessing [
			a kdr:CalculationProcessor;
			kds:calculationType kdr:Concat;
			kds:calculationSeparator ",";
			kds:calculation "!--base_api_url,issuer/,<<schema:alternativeName>>,.json"
		];
		kds:apiFieldName "issuer";
		
	].
	
obi:BadgeImageApi a kds:ApiClass;
	rdfs:label "Badge Definition";
	rdfs:comment "This api returns an open badge image.";
	kds:apiInstructions [
		kds:apiMethod "GET";
		kds:lookupClassUri obi:BadgeClass;
		kds:lookupPropertyUri schema:alternativeName;
		kds:apiUrl "badge";
		kds:apiUrlExtension "png";
		kds:returnType "file";
		kds:mimeType "image/png"
	];
	kds:hasProperty [
		kds:propUri schema:image;
		kds:classUri obi:BadgeClass;
		kds:apiFieldName "image";
	].

obi:IssuerApi a kds:ApiClass;
	rdfs:label "Badge Definition";
	rdfs:comment "This api returns an issuer definition.";
	kds:apiInstructions [
		kds:apiMethod "GET";
		kds:lookupClassUri schema:Organization;
		kds:lookupPropertyUri schema:alternativeName;
		kds:apiUrl "issuer";
		kds:apiUrlExtension "json";
		kds:returnType "json"
	];
	kds:hasProperty [
		kds:propUri kds:StaticValue;
		kds:returnValue "https://w3id.org/openbadges/v1";	
		kds:classUri kds:NoClass;
		kds:apiFieldName "@context";
	];
	kds:hasProperty [
		kds:propUri kds:StaticValue;
		kds:returnValue "Issuer";	
		kds:classUri kds:NoClass;
		kds:apiFieldName "type";
	];
	kds:hasProperty [
		kds:propUri schema:name;
		kds:classUri schema:Organization;
		kds:apiFieldName "name";
	];
	kds:hasProperty [
		kds:propUri schema:description;
		kds:classUri schema:Organization;
		kds:apiFieldName "description";
	];
	kds:hasProperty [
		kds:propUri schema:alternativeName;
		kds:classUri schema:Organization;
		kds:propertyProcessing [
			a kdr:CalculationProcessor;
			kds:calculationType kdr:Concat;
			kds:calculationSeparator ",";
			kds:calculation "!--api_url"
		] ;
		kds:apiFieldName "id";
		
	];
	kds:hasProperty [
		kds:propUri schema:alternativeName;
		kds:classUri schema:Organization;
		kds:propertyProcessing [
			a kdr:CalculationProcessor;
			kds:calculationType kdr:Concat;
			kds:calculationSeparator ",";
			kds:calculation "!--base_api_url,issuer/,<<schema:alternativeName>>,.png"
		] ;
		kds:apiFieldName "image";
		
	];
	kds:hasProperty [
		kds:propUri schema:URL;
		kds:classUri schema:Organization;
		kds:apiFieldName "url";
	];
	kds:hasProperty [
		kds:propUri schema:email;
		kds:classUri schema:Organization;
		kds:apiFieldName "email";
	];
	kds:hasProperty [
		kds:propUri schema:alternativeName;
		kds:classUri schema:Organization;
		kds:propertyProcessing [
			a kdr:CalculationProcessor;
			kds:calculationType kdr:Concat;
			kds:calculationSeparator ",";
			kds:calculation "!--base_api_url,revoked.json"
		] ;
		kds:apiFieldName "revocationList";
	].
	
obi:OrganizationImageApi a kds:ApiClass;
	rdfs:label "Badge Definition";
	rdfs:comment "This api returns an open badge image.";
	kds:apiInstructions [
		kds:apiMethod "GET";
		kds:lookupClassUri schema:Organization;
		kds:lookupPropertyUri schema:alternativeName;
		kds:apiUrl "issuer";
		kds:apiUrlExtension "png";
		kds:returnType "file";
		kds:mimeType "image/png"
	];
	kds:hasProperty [
		kds:propUri schema:image;
		kds:classUri schema:Organization;
		kds:apiFieldName "image";
	].

obi:AssertionImageApi a kds:ApiClass;
	rdfs:label "Assertion Image";
	rdfs:comment "This api returns an open badge assertion image.";
	kds:apiInstructions [
		kds:apiMethod "GET";
		kds:lookupClassUri obi:Assertion;
		kds:subjectUriTransform kdr:UidToRepositoryUri;
		kds:apiUrl "assertion";
		kds:apiUrlExtension "png";
		kds:returnType "file";
		kds:mimeType "image/png"
	];
	kds:hasProperty [
		kds:propUri schema:image;
		kds:classUri schema:Assertion;
		kds:apiFieldName "image";
	].	
	
obi:AssertionApi a kds:ApiClass;
	rdfs:label "Asseriton Definition";
	rdfs:comment "This api returns an open badge assertion.";
	kds:apiInstructions [
		kds:apiMethod "GET";
		kds:lookupClassUri obi:Assertion;
		kds:subjectUriTransform kdr:UidToRepositoryUri;
		kds:apiUrl "assertion";
		kds:apiUrlExtension "json";
		kds:returnType "json"
	];
	kds:hasProperty [
		kds:propUri kds:StaticValue;
		kds:returnValue "https://w3id.org/openbadges/v1";	
		kds:classUri kds:NoClass;
		kds:apiFieldName "@context";
	];
	kds:hasProperty [
		kds:propUri obi:issuedOn;
		kds:classUri obi:Assertion;
		kds:propertyProcessing [
			a kdr:CalculationProcessor;
			kds:calculationType kdr:Concat;
			kds:calculationSeparator ",";
			kds:calculation "!--api_url"
		] ;
		kds:apiFieldName "id";
		
	];
	kds:hasProperty [
		kds:propUri obi:issuedOn;
		kds:classUri obi:Assertion;
		kds:propertyProcessing [
			a kdr:CalculationProcessor;
			kds:calculationType kdr:DateConvertor;
			kds:calculation "Unix timestamp"
		] ;
		kds:apiFieldName "issuedOn";
		
	];
	kds:hasProperty [
		kds:propUri obi:expires;
		kds:classUri obi:Assertion;
		kds:propertyProcessing [
			a kdr:CalculationProcessor;
			kds:calculationType kdr:DateConvertor;
			kds:calculation "Unix timestamp"
		] ;
		kds:apiFieldName "expires";
		
	];
	kds:hasProperty [
		kds:propUri kds:StaticValue;
		kds:returnValue "Assertion";	
		kds:classUri kds:NoClass;
		kds:apiFieldName "type";
	];
	kds:hasProperty [
		kds:propUri obi:recipient;
		kds:classUri obi:Assertion;
		kds:propertyProcessing [
			a kdr:CalculationProcessor;
			kds:calculationType kdr:UriTruncation;
			kds:calculationField "!--subjectUri";
			kds:calculation "!--afterLastSlash"
		] ;
		kds:apiFieldName "uid";
	];
	kds:hasProperty [
		kds:propUri schema:email;
		kds:classUri schema:Person;
		kds:propertyProcessing [
			a kdr:CalculationProcessor;
			kds:calculationType kdr:ObjectGenerator;
			kds:returnType "json";
			kds:calculationObject [
				kds:objectKey "type";
				kds:objectValue "email";
				kds:calculationSeparator ","
			];
			kds:calculationObject [
				kds:objectKey "hashed";
				kds:objectValue "true";
				kds:calculationSeparator ","
			];
			kds:calculationObject [
				kds:objectKey "salt";
				kds:objectValue "<<kds:salt|obi:Assertion>>";
				kds:calculationSeparator ","
			];
			kds:calculationObject [
				kds:objectKey "identity";
				kds:objectValue "<<schema:email>>";
				kds:calculationType kdr:ValueHasher;
			]
		] ;
		kds:apiFieldName "recipient";
	];
	kds:hasProperty [
		kds:propUri schema:alternativeName;
		kds:classUri obi:Assertion;
		kds:propertyProcessing [
			a kdr:CalculationProcessor;
			kds:calculationType kdr:Concat;
			kds:calculationSeparator ",";
			kds:calculation "!--base_api_url,assertion/,kds:calculationType|kdr:UriTruncation||kds:calculationField|!--subjectUri||kds:calculation|!--afterLastSlash,.png"
		] ;
		kds:apiFieldName "image";
	];
	kds:hasProperty [
		kds:propUri schema:alternativeName;
		kds:classUri obi:BadgeClass;
		kds:propertyProcessing [
			a kdr:CalculationProcessor;
			kds:calculationType kdr:Concat;
			kds:calculationSeparator ",";
			kds:calculation "!--base_api_url,badge/,<<schema:alternativeName>>,.json"
		] ;
		kds:apiFieldName "badge";
	];
	kds:hasProperty [
		kds:propUri obi:recipient;
		kds:classUri obi:Assertion;
		kds:propertyProcessing [
			a kdr:CalculationProcessor;
			kds:calculationType kdr:ObjectGenerator;
			kds:returnType "json";
			kds:calculationObject [
				kds:objectKey "type";
				kds:objectValue "hosted"
			];
			kds:calculationObject [
				kds:objectKey "url";
				kds:objectValue "!--api_url";
				kds:calculationSeparator ","
			]
		] ;
		kds:apiFieldName "verify";
	].
	