import datetime


import logging
import os
import pymarc
import rdflib
import sys
import unittest
import uuid

sys.path.append(os.path.abspath(os.path.curdir))
import marc_ingester

marc_ingester.MLOG_LVL = logging.CRITICAL
logging.getLogger("requests").setLevel(logging.CRITICAL)
logging.getLogger("urllib3").setLevel(logging.CRITICAL)

class TestAddingAdminData(unittest.TestCase):

    def setUp(self):
        self.entity = rdflib.URIRef("http://test/resource")
        self.graph = marc_ingester.new_graph()
        
    def test_add_admin_metadata(self):
        marc_ingester.add_admin_metadata(self.graph, self.entity)
        subjects = [s for s in self.graph.subjects()]
        self.assertTrue(self.entity in subjects)
        self.assertEqual(len(subjects), 4)
        
    def test_type_of(self):
        sparql = """SELECT ?bnode
WHERE {{
    ?bnode a <{0}> .
}}"""
        marc_ingester.add_admin_metadata(self.graph, self.entity)
        results = [row for row in self.graph.query(
            sparql.format(marc_ingester.BF.GenerationProcess))]
        self.assertEqual(len(results), 1)
        self.assertTrue(isinstance(results[0][0], rdflib.BNode))

    def test_generate_date(self):
        sparql = """SELECT ?generationDate
WHERE {{
    ?bnode <{0}> ?generationDate .
}}""".format(marc_ingester.BF.generationDate)
        marc_ingester.add_admin_metadata(self.graph, self.entity)
        results = [r for r in self.graph.query(sparql)]
        date_literal = results[0][0]
        generate_date = datetime.datetime.strptime(
            date_literal, 
            "%Y-%m-%dT%H:%M:%S.%f")
        self.assertTrue(generate_date < datetime.datetime.utcnow())

    def test_rdf_value(self):
        sparql = """SELECT ?default
WHERE {
    ?bnode <http://www.w3.org/1999/02/22-rdf-syntax-ns#value> ?default .
}"""
        marc_ingester.add_admin_metadata(self.graph, self.entity)
        results = [r for r in self.graph.query(sparql)]
        message = results[0][0]
        self.assertEqual(str(message),
                         "Generated by RDF Framework from KnowledgeLinks.io")
        

class TestAddingToTriplestore(unittest.TestCase):

    def setUp(self):
        self.graph = marc_ingester.new_graph()

    def test_add_to_triplestore(self):
        marc_ingester.add_to_triplestore(self.graph)
    


class TestDeduplicatingInstances(unittest.TestCase):

    def setUp(self):
        self.graph = marc_ingester.new_graph()


    def test_default_deduplicate_instances(self):
        marc_ingester.deduplicate_instances(self.graph)


class TestDeduplicatingAgents(unittest.TestCase):

    def setUp(self):
        self.graph = marc_ingester.new_graph()

    def test_default_deduplicate_agents(self):
        marc_ingester.deduplicate_agents(
            self.graph, 
            marc_ingester.SCHEMA.oclc, 
            marc_ingester.BF.Agent)


class TestMatchMARC(unittest.TestCase):

    def setUp(self):
        self.graph = marc_ingester.new_graph()
        self.marc_record = pymarc.Record()
        self.marc_record.add_field(
            pymarc.Field('245', 
                ['1', '0'],
                ['a', 'This is a test:',
                 'b', 'and subtitle']))

    def test_match_245_mainTitle(self):
        self.assertEqual(
            marc_ingester.match_marc(self.marc_record, 'M24510a'),
            ["This is a test:",])

    def test_match_245_subtitle(self):
        self.assertEqual(
            marc_ingester.match_marc(self.marc_record, 'M24510b'),
            ["and subtitle"])


class TestNewExistingBNode(unittest.TestCase):

    def setUp(self):
        self.graph = marc_ingester.new_graph()

    def test_new_bnode(self):
        marc_ingester.setup()
        result = marc_ingester.new_existing_bnode(
            self.graph,
            marc_ingester.SCHEMA.name,
            "M24510a")
        self.assertTrue(isinstance(result, rdflib.BNode))

class TestNewGraph(unittest.TestCase):

    def setUp(self):
        self.graph = marc_ingester.new_graph()

    def test_new_graph(self):
        self.assertEqual(self.graph.serialize(format='turtle').decode(),
            """@prefix bf: <http://id.loc.gov/ontologies/bibframe/> .
@prefix kds: <http://knowledgelinks.io/ns/data-structures/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix relators: <http://id.loc.gov/vocabulary/relators/> .
@prefix schema: <http://www.schema.org/> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

""")

class TestPopulateEntity(unittest.TestCase):

    def setUp(self):
        self.graph = marc_ingester.new_graph()
        self.marc_record = pymarc.Record()


    def test_new_instance(self):
        entity = marc_ingester.populate_entity(
            marc_ingester.BF.Instance,
            self.graph,
            self.marc_record)
        self.assertEqual(
            self.graph.value(subject=entity, 
                predicate=rdflib.RDF.type),
            marc_ingester.BF.Instance)

class TestRemoveBlankNodes(unittest.TestCase):

    def setUp(self):
        self.graph = marc_ingester.new_graph()
        self.bnode = rdflib.BNode()
        self.graph.add((self.bnode, rdflib.RDF.type, marc_ingester.BF.Isbn))

    def test_flat_remove_blank_nodes(self):
        self.assertTrue(self.bnode in [s for s in self.graph.subjects()])
        marc_ingester.remove_blank_nodes(self.graph, self.bnode)
        self.assertFalse(self.bnode in [s for s in self.graph.subjects()])


class TestReplaceURIs(unittest.TestCase):

    def setUp(self):
        self.graph = marc_ingester.new_graph()
        self.old_uri = rdflib.URIRef("http://old.bibcat.org/{}".format(
            uuid.uuid1()))
        self.work_uri = rdflib.URIRef("http://bibcat.org/{}".format(
            uuid.uuid1()))
        self.graph.add((
            self.old_uri, 
            marc_ingester.BF.instanceOf, 
            self.work_uri))
        self.new_uri = rdflib.URIRef("http://new.bibcat.org/{}".format(
            uuid.uuid1()))

    def test_simple_replace_uri(self):
        self.assertEqual(
            self.graph.value(predicate=marc_ingester.BF.instanceOf,
                             object=self.work_uri),
            self.old_uri)
        marc_ingester.replace_uris(self.graph, self.old_uri, self.new_uri)
        self.assertEqual(
            self.graph.value(predicate=marc_ingester.BF.instanceOf,
                             object=self.work_uri),
            self.new_uri)

if __name__ == '__main__':
    unittest.main()
    

