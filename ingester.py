"""BIBFRAME 2.0 ingester helper functions"""
__author__ = "Jeremy Nelson, Mike Stabile"

import inspect
import logging
import os
import rdflib
import sys

# get the current file name for logs and set logging level
MNAME = inspect.stack()[0][1]
MLOG_LVL = logging.DEBUG
logging.basicConfig(level=logging.DEBUG)

sys.path.append(
    os.path.split(os.path.abspath(os.curdir))[0])
from instance import config

BF = rdflib.Namespace("http://id.loc.gov/ontologies/bibframe/")
KDS = rdflib.Namespace("http://knowledgelinks.io/ns/data-structures/")
RELATORS = rdflib.Namespace("http://id.loc.gov/vocabulary/relators/")
SCHEMA = rdflib.Namespace("http://schema.org/")


def add_admin_metadata(graph, entity):
    """Takes a graph and adds the AdminMetadata for the entity

    Args:
        graph (rdflib.Graph): RDF Graph of the entity
        entity (rdflib.URIRef): URI of the entity
    """
    generation_process = rdflib.BNode()
    graph.add((generation_process, rdflib.RDF.type, BF.GenerationProcess))
    graph.add((generation_process, 
               BF.generationDate, 
               rdflib.Literal(datetime.datetime.utcnow().isoformat())))
    graph.add((generation_process,
               rdflib.RDF.value,
               rdflib.Literal("Generated by RDF Framework from KnowledgeLinks.io", 
                   lang="en")))
    graph.add((entity, BF.generationProcess, generation_process))


def add_to_triplestore(graph):
    """Takes graph and sends POST to add to triplestore

    Args:
        graph(rdflib.Graph): Transformed and deduplicated RDF BIBFRAME Graph
    """
    lg = logging.getLogger("%s-%s" % (MNAME, inspect.stack()[0][3]))
    lg.setLevel(MLOG_LVL)
    add_result = requests.post(config.get("TRIPLESTORE_URL"),
            data=graph.serialize(format='turtle'),
	    headers={"Content-Type": "text/turtle"})
    if add_result.status_code > 399:
        lg.error("Could not add graph to {}, status={}".format(
            TRIPLESTORE_URL,
            add_result.status_code))


def new_graph():
    # setup log
    lg = logging.getLogger("%s-%s" % (MNAME, inspect.stack()[0][3]))
    lg.setLevel(MLOG_LVL)
    graph = rdflib.Graph()
    graph.namespace_manager.bind("bf", BF)
    graph.namespace_manager.bind("kds", KDS)
    graph.namespace_manager.bind("owl", rdflib.OWL)
    graph.namespace_manager.bind("rdf", rdflib.RDF)
    graph.namespace_manager.bind("rdfs", rdflib.RDFS)
    graph.namespace_manager.bind("relators", RELATORS)
    graph.namespace_manager.bind("schema", SCHEMA)
    return graph
